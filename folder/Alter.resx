<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHxUDJEMuBUcUDgIYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAADQkBEHtUCovZlRH27aIT/9CPEexnRgh1AwIABQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFI4B13GhxDf7qMU/9+ZEv/blhL/4psT/+6jE/+3fA/OPysFSAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0fBDSlcA6666ET/+ScE//blhL/45wT/+eeE//imxP/25YS/+ee
        E//nnhP/kmQMph0UAiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        DtXuoxP/4JoS/9qVEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/2pUS/+OcE//tohP/q3UOwCweBDMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIRcDJ5lo
        DK3poBP/5p4T/9qWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/poBP/4psS/4VbC5cUDgIXAAAAAAAAAAAAAAAAAAAAABgQ
        AhzalRL+86YU/9yWEv/alhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9qWEv/dlxL/+aoV/7+EEOAHBQEIAAAAAAAA
        AAAAAAAACQYBC39WCpTgmRP+6qAT/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/alhL/3JcS/+yiE//YkxH0aEcIeQMC
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAADAhBDipcw2/7KIT/+OcE//alRL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/2pYS/+eeE//onxP/l2cLqyAW
        AyYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXPAdky4oQ5e6jE//emBL/2pUS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/2pUS/+CaEv/uoxT/vIEP1EQv
        Bk4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASDAIWglkLk+CZ
        Ev7qoBP/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/2pYS/9yXEv/sohP/1pMR821L
        CX0GBAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAMCEEOKl0DsDsohP/45wT/9qVEv/blhL/25YS/9uWEv/blhL/25YS/9qWEv/mnhP/6J8T/5do
        C6shFgMmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFg9B2XLihDl7qMT/96YEv/alhL/25YS/9qVEv/gmhL/7qMT/7yB
        DtVFLwZPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABINAhaDWgqU4ZoS/+yiE//knBP/7qMT/9eT
        EfRuTAl+BwUBCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxIgQ5nmsNsr6D
        ENSPYguiIhcDJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////j////gP///wB///wAH//wAAf/4BwD/4BAAP4AgIA8Ag
        AgHAgAAB8QAAR/wCIB/wCAAHwBAEAcBAAQHhAAAD+gAAL/gAAA/gAAADwAAAAcAAAAHwAAAH/AAAH/4A
        AD//gAD//+AD///wB////B////////////8=
</value>
  </data>
</root>